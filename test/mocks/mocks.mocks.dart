// Mocks generated by Mockito 5.4.4 from annotations
// in track_overflow/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:track_overflow/services/background_service.dart' as _i3;
import 'package:track_overflow/services/caching_service.dart' as _i4;
import 'package:track_overflow/services/error_handler_service.dart' as _i5;
import 'package:track_overflow/services/playback_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PlaybackService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaybackService extends _i1.Mock implements _i2.PlaybackService {
  MockPlaybackService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void play() => super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void pause() => super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stop() => super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BackgroundService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBackgroundService extends _i1.Mock implements _i3.BackgroundService {
  MockBackgroundService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void enableBackgroundPlayback() => super.noSuchMethod(
        Invocation.method(
          #enableBackgroundPlayback,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void disableBackgroundPlayback() => super.noSuchMethod(
        Invocation.method(
          #disableBackgroundPlayback,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateMediaControls(String? trackName) => super.noSuchMethod(
        Invocation.method(
          #updateMediaControls,
          [trackName],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CachingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCachingService extends _i1.Mock implements _i4.CachingService {
  MockCachingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void cacheData(
    String? key,
    dynamic value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #cacheData,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic getCachedData(String? key) => super.noSuchMethod(Invocation.method(
        #getCachedData,
        [key],
      ));

  @override
  void clearCache() => super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ErrorHandlerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorHandlerService extends _i1.Mock
    implements _i5.ErrorHandlerService {
  MockErrorHandlerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void logError(String? message) => super.noSuchMethod(
        Invocation.method(
          #logError,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void showErrorDialog(
    _i6.BuildContext? context,
    String? message,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #showErrorDialog,
          [
            context,
            message,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
